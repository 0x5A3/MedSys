def page_profile(arg):
    if len(arg) != 1:
        results = [HTML.card(["Error 500: Internal Server Error"])]
        username = ""
    else:
        username = arg[0]
        
        if not results:
            results = [HTML.card(["No items found :("])]

    return HTML.page("Checkout", [
        HTML.node("script", f'let username = "{username}";'),
        HTML.node("div", [

            HTML.subtitle("Profile"),
            profile_icon(username),

            HTML.text_input("Billing Address", div_id="address"),
        ], {"id": "banner"}
        )] + results,
        scripts=["base.js", "store.js", "checkout.js"],
        css=["style.css", "store.css"]
    )
const $ = name => {
    switch(name[0]){
        case '#': return document.getElementById(name.slice(1));
        default: return null;
    }
};
const input_get = elem => elem.childNodes[1].value;

const goto = ref => { window.location.href = ref; };

const request = (method, url, data, respond) => {
    let XHR = new XMLHttpRequest();

    XHR.onload = () => {
        if(XHR.status < 400){
            let data = XHR.response;
            console.log("RECIEVED ", data)
            respond(data); 
        }
        else{
            goto("error");
        }
    };
    XHR.onerror = () => goto("error");

    XHR.open(method, url);
    XHR.responseType = "json";
    if (data){
        console.log("SENDING", data);
        XHR.setRequestHeader("Content-Type", "application/json");
    }
    XHR.send(JSON.stringify(data));
};

const user_upload = (method, data, update) =>
    request("POST", method, { username: username, ...data },
        data => {
            if(data.success){ update(); }
            else{ alert("Error: ", data.reason); }
        }
    );
import HTML
from pymongo import MongoClient


def start():
    global db
    global db_users
    global db_items
    global db_transactions

    client = MongoClient()

    db = client.online_pharmacy
    db.items.deleteMany()
    db_users = db.users
    db_items = db.items
    db_transactions = db.transactions

    db_users.insert_one({
        "username": "a",
        "password": "a",
        "name_first": "Alex",
        "name_first": "Anderson",
        "email": "root@gmail.com",
        "cart": {}
    })
    db_items.insert_one({
        "item_id": 32,
        "name": "Patanjali hair OILE",
        "desc": "Cures Cancer",
        "price": 105,
        "stock": 69
    })
    db_items.insert_one({
        "item_id": 512000132,
        "name": "Ibuprofen",
        "desc": "RS-2-(4-(2-methylpropyl)phenyl)propanoic acid",
        "price": 20,
        "stock": 30
    })


def quit():
    pymongo.quit()


def Result(success, reason):
    return {"success": success, "reason": reason}


def Error(reason):
    return Result(False, reason)


def ServerError():
    return Error("Internal Server Error")


def Ok():
    return Result(True, "success")


def username_checker(username, field_name):
    if len(username) > 15:
        return f"{field_name} cannot be more than 15 characters!"

    if username[0].isdigit():
        return f"{field_name} should start with a letter or an underscore"
    # no capital letters
    for i in username:
        if i.isalpha:
            return None
    else:
        return f"{field_name} should contain atleast 1 letter!"


def name_checker(name, field_name):
    if len(name) > 15:
        return f"{field_name}: cannot be more than 10 characters!"

    if name[0].isupper():
        if len(name) == 1 or name[1:].islower():
            msg = None
        else:
            msg = f"{field_name}: Only first letter should be capitalized!"
    else:
        msg = f"{field_name}: First letter should be capitalized!"

    return msg

def email_checker(email, field_name):
    if email[0].isalpha() == False:
        return f"{field_name} should start with a letter!"

    if email.count("@") != 1:
        return f"{field_name} should contain exactly one '@'!"

    for i in '.@':
        index = 0
        old_index = None
        while old_index != index:
            old_index = index
            index = old_index + email[old_index:].find(i)
            #print(old_index, index)
            try:
                if email[index + 1] in '.@':
                    return f"{field_name} cannot use special characters next to each other!"

            except:
                return f"Cannot end {field_name} with '.' or '@'!"

    second_part = email.split('@')[-1]
    if second_part.count('.') != 1:
        return f"Enter valid domain in {field_name}!"

def password_checker(password, field_name):
    upper_case = special_characters = numbers = 0

    if password[0].isspace() or password[-1].isspace():
        return "Password cannot start or end with a whitespace!"
    else:
        for character in password:
            if character.isalpha():
                if character.isupper():
                    upper_case += 1
                else:
                    pass
            elif character.isdigit():
                numbers += 1
            elif character.isspace():
                pass
            else:
                special_characters += 1
        length = len(password)

        error_list = []
        if length < 7:
            error_list.append("7 characters")
        if upper_case < 1:
            error_list.append("1 Upper Case")
        if numbers < 1:
            error_list.append("1 Number")
        if special_characters < 1:
            error_list.append("1 Special Character")

        error_length = len(error_list)
        if error_length == 0:
            return None
        else:
            error_message = f"{field_name} needs to have atleast "
            for i in range(error_length):
                if i != (error_length - 1):
                    error_message += f'{error_list[i]}, '
                elif i == 0:
                    error_message += f'{error_list[i]}!'
                else:
                    error_message += f'and {error_list[i]}!'
            return error_message


def register(state):
    user = db_users.find_one({"username": state["username"]})

    def FieldError(msg, div_id):
        return {
            "success": False,
            "reason": msg,
            "div_id": div_id
        }

    if user:
        return FieldError("user already exists", "username")

    field_names = {
        "username": ("Username", username_checker),

        "name_first": ("First name", name_checker),
        "name_last": ("Last name", name_checker),

        "email": ("Email", email_checker),

        "password": ("Password", password_checker),
    }
    for field_key in field_names:
        field_name, field_checker = field_names[field_key]

        if field_key not in state or not state[field_key]:
            return FieldError(f"{field_name} required", field_key)

        msg = field_checker(state[field_key], field_name)
        if msg is not None:
            return FieldError(msg, field_key)

    state["cart"] = {}
    db_users.insert_one(state)
    return Ok()


def get_names(username):
    user = db_users.find_one({"username": username})
    return user["name_first"], user["name_last"]


def login(state):
    if db_users.find_one(state):
        return Ok()
    return Error("incorrect username/password")

class Item:
    Attr_Map = [
        "item_id",
        "name",
        "desc",
        "price",
        "stock"
    ]

    def __init__(self, attr_dict):
        for attr in Item.Attr_Map:
            if attr in attr_dict:
                setattr(self, attr, attr_dict[attr])
            else:
                raise Exception(f"Attribute missing {attr}")

    def to_html(self, button, n, checkout, disabled=False):
        return HTML.div([
            HTML.div([self.name], {"class": "name"}),
            HTML.div([self.desc], {"class": "desc"}),

            HTML.div([
                HTML.span([f"{self.price} AED"]),
                HTML.leaf("input" + (" disabled" if disabled else ""), {
                    "type": "number", "class": "number",
                    "value": str(n), "min": "1", "max": str(self.stock),
                    "oninput": f"add_item_quantity(this, {self.item_id}, {checkout})"
                }), button],
                {"class": "select"}
            )],

            {"id": f"item-{self.item_id}", "class": "item"}
        )

    def cart_add(self):
        return self.to_html(
            HTML.button("Add to cart", f"add_item(this, {self.item_id})"), 0, "false", True)

    def cart_remove(self, n):
        return self.to_html(
            HTML.button("Remove", f"remove_item(this, {self.item_id})"), n, "false")

    def checkout_remove(self, n):
        return self.to_html(
            HTML.button("Remove", f"checkout_remove(this, {self.item_id})"), n, "true")

def search(username, query):
    query = " ".join(query.split())  # remove redundant spaces

    matches = db_items.find({
        "name": {"$regex": query, "$options": "i"},
        "stock": {"$gt": 0}
    })

    user = db_users.find_one({"username": username})
    if not user:
        return []

    cart = user["cart"]

    results = []
    for item in matches:
        item = Item(item)
        __id = str(item.item_id)

        if __id in cart:
            results += [item.cart_remove(cart[__id])]
        else:
            results += [item.cart_add()]
    return results

def checkout(username):
    user = db_users.find_one({"username": username})

    if not user:
        return ServerError()

    price = 0

    cart, results = user["cart"], []
    for item_id in cart:
        item = db_items.find_one({"item_id": int(item_id)})
        price += int(item["price"]) * int(cart[item_id])

        if not item:
            continue

        results += [Item(item).checkout_remove(cart[item_id])]
    return results + [HTML.div(f"Price: {price} AED")]


def __cart_update(username, cart):
    db_users.update_one(
        {"username": username},
        {"$set": {"cart": cart}}
    )

def cart_add(state):
    try:
        username, item_id, n = state["username"], state["item_id"], state["quantity"]

        item = db_items.find_one({"item_id": item_id})
        user = db_users.find_one({"username": username})

        if not item or not username:
            return ServerError()

        cart = user["cart"]
        cart[str(item_id)] = int(n)
        __cart_update(username, cart)

        user = db_users.find_one({"username": username})

        return Ok()
    except Exception as ex:
        print("#", ex)

    return ServerError()

def cart_remove(state):
    try:
        username, item_id = state["username"], state["item_id"]

        item = db_items.find_one({"item_id": item_id})
        user = db_users.find_one({"username": username})

        if not item or not user:
            return ServerError()

        cart = user["cart"]
        try:
            del cart[str(item_id)]
        except:
            pass

        __cart_update(username, cart)

        user = db_users.find_one({"username": username})

        return Ok()
    except Exception as ex:
        print("#", ex)
    return ServerError()

def purchase(state):
    try:
        username = state["username"]
        user = db_users.find_one({"username": username})

        print(user)
        if not user:
            return ServerError()

        cart = user["cart"]

        for item_id in cart:
            print(item_id, cart[item_id], type(cart[item_id]))
            item_verify = db_items.find_one({
                "item_id": int(item_id),
                "stock": {"$gte": cart[item_id]}
            })
            print(item_verify)
            if not item_verify:
                return ServerError()

        for item_id in cart:
            db_items.update_one(
                {"item_id": int(item_id)},
                {"$inc": {"stock": -cart[item_id]}}
            )

        import datetime
        transaction = {
            "username": username,
            "address": state["address"],
            "info": cart,
            "time": str(datetime.datetime.now())
        }
        db_transactions.insert_one(transaction)

        __cart_update(username, {})

        return Ok()
    except Exception as ex:
        print("#", ex)
    return ServerError()

def make_prop(prop):
    prop_lst = ""
    for key, value in prop.items():
        prop_lst += f' {key}="{value}"'
    return prop_lst


def leaf(name, prop={}):
    return f"<{name}{make_prop(prop)}/>"


def node(name, inner=[], prop={}):
    return f"<{name}{make_prop(prop)}>{''.join(inner)}</{name}>"


def div(inner, prop={}):
    return node("div", inner, prop)


def span(inner, prop={}):
    return node("span", inner, prop)


def text_input(text, in_type="text", div_id="", style="", onkeydown="", value=""):
    return div([
        div([text]),
        leaf("input", {
            "type": in_type,
            "onkeydown": onkeydown,
            "value": value
        }),
        span([])],
        {"id": div_id, "class": "form" + style}
    )


def button(text, onclick="", style=""):
    return leaf("input", {
        "value": text,
        "type": "submit",
        "class": "button " + style,
        "onclick": onclick
    })


def title(name):
    return node("header", name, {
        "style": "font-size: 150%; margin: 5%"
    })


def subtitle(name):
    return node("header", name, {
        "style": "font-size: 100%; margin: 5%"
    })


def card(body, styleclass="card"):
    return node("div", body, {"class": styleclass})


def html_files(path_lst, node_type):
    lst = []
    for path in path_lst:
        try:
            with open(path) as file:
                lst.append(node(node_type, file.read()))
        except:
            pass
    return lst


def page(title, body="", scripts=[], css=[]):
    return "<!DOCTYPE html>" + node("html", [
        node("head", [
            leaf("meta", {"charset": "utf-8"}),
            node("title", [title]),
            node("link", prop={
                "href": "https://fonts.googleapis.com/css2?family=Noto+Sans&display=swap",
                "rel": "stylesheet"
            })
        ] + html_files(css, "style")),
        node("body", body + html_files(scripts, "script"))
    ])

html,
body {
    margin: 0;
    padding: 0;
    width: 100%;
    height: 100%;
    background: var(--bg-color);
}

body {
    display: flex;
    flex-flow: column nowrap;
    justify-content: center;
    align-items: center;
}const login = () => {
    let username = input_get($("#username"));

    request("POST", "$login", 
        { 
            username: username, 
            password: input_get($("#password"))
        },
        data => { 
            if(!data.success){
                $("#password").childNodes[2].innerHTML = data.reason;
            }
            else{
                goto(`store/${username}/`);
            }
        }
    );
};
import database as DB
import server

if __name__ == "__main__":
    DB.start()
    server.run_server()
    DB.quit()const [password, confirm] = [$("#password"), $("#password-confirm")];

const not_match = (msg, exclude) => 
    (chr => {
        if(exclude.includes(chr)){
            return `Cannot contain ${msg}`;
        }
        return "";
    });

const not_bracket = not_match("brackets", "(){}[]");
const not_space = not_match("spaces", " \n\r\t");
const not_caps = not_match("caps", "ABCDEFGHIJKLMNOPQRSTUVWXYZ");

const not_op = not_match("special characters", "+-*/<=>\\^%~!&|\"`',:;#$?");
const not_misc = not_match("special characters", "@.");

const not_lst_email = [not_bracket, not_space, not_op];
const not_lst_special = not_lst_email.concat([not_misc]);
const not_number = not_match("numbers", "0123456789");

const constrain_field = {
    "#username": [not_space, not_caps].concat(not_lst_special), 
    "#email": [not_space].concat(not_lst_email),
    "#name_first": [not_space, not_number].concat(not_lst_special), 
    "#name_last": [not_space, not_number].concat(not_lst_special)
};

for(const id in constrain_field){
    const field = $(id);  

    field.childNodes[1].onkeydown = () => {
        for(let id in constrain_field){
            $(id).childNodes[2].innerHTML = "";
        }

        for(const check of constrain_field[id]){
            msg = check(event.key);
            if(msg.length > 0){
                field.childNodes[2].innerHTML = msg;
                event.preventDefault();
                break;
            }
        }
    };
}


let password_match = () => {
    if(input_get(password) === input_get(confirm)){
        confirm.childNodes[2].innerHTML = "";
    }
    else{
        confirm.childNodes[2].innerHTML = "error passwords dont match";
    }
}

let set_check = (node, fn) =>
    node.childNodes[1].oninput = () => {
        const [value, error] = fn(node.childNodes[1].value);
        node.childNodes[2].innerHTML = error;
        node.childNodes[1].value = output
    };

password.childNodes[1].oninput = password_match
confirm.childNodes[1].oninput = password_match;

const register = () => {
    const pass = input_get(password);
    const conf = input_get(confirm);

    if(pass === conf){
        request("POST", "$register",
            {
                username: input_get($("#username")),
                password: pass,
                email: input_get($("#email")),
                
                name_first: input_get($("#name_first")),
                name_last: input_get($("#name_last")),
            },
            data => { 
                console.log(data);
                if(!data.success){
                    $(`#${data.div_id}`).childNodes[2].innerHTML = data.reason;
                }
                else{
                    console.log("GOING!");
                    goto("login");
                }
            }
        )
    }
};import platform
import database as DB
import webbrowser
import http.server
import HTML
import json
import server
import store
import account


def page_login(arg):
    return HTML.page("MedSys Login", [
        HTML.card([
            HTML.title("MedSys"),
            HTML.subtitle("Sign in"),

            HTML.text_input("Enter your username",
                            div_id="username"),
            HTML.text_input("Enter your password",
                            div_id="password", in_type="password"),

            HTML.div([
                HTML.button("Next", onclick="login()"),
                HTML.button("Create Account",
                            onclick="goto('register')", style="text"),
            ])
        ], "card login")],

        scripts=["base.js", "login.js"],
        css=["style.css", "login.css"]
    )


def page_register(arg):
    return HTML.page("MedSys Register", [
        HTML.card([
            HTML.subtitle("MedSys"),
            HTML.title("Register"),

            HTML.text_input("Username", div_id="username"),
            HTML.text_input("First Name", div_id="name_first"),
            HTML.text_input("Last Name", div_id="name_last"),

            HTML.text_input("Email", div_id="email"),

            HTML.text_input("Password",
                            div_id="password", in_type="password"),
            HTML.text_input("Confirm Password",
                            div_id="password-confirm", in_type="password"),

            HTML.div([
                HTML.button("Create", onclick="register()"),
                HTML.button("Login", onclick="goto('login')", style="text"),
            ])
        ], "card login")],

        scripts=["base.js", "register.js"],
        css=["style.css", "login.css"]
    )



def page_error(code, msg):
    return HTML.page("MedSys Error", [
        HTML.card([
            HTML.title(f"Error {code}"),
            HTML.subtitle(msg)
        ])
    ], css=["style.css"])


def page_generic_error(arg):
    return page_error(500, "Internal server error")


page_maker = {
    "login": page_login,
    "register": page_register,

    "store": store.page_store,
    "checkout": store.page_checkout,
    "history": store.page_history,
    
    "account": account.page_profile,
    "error": page_generic_error,
}


class RequestHandler(http.server.BaseHTTPRequestHandler):
    def respond(self, code, fmt, data=None):
        self.send_response(code)
        self.send_header("Content-type", fmt)
        self.end_headers()

        if data:
            self.wfile.write(data)

    def do_GET(self):
        path = "/login" if self.path == "/" else self.path

        path_parts = path[1:].split("/")
        domain, args = path_parts[0], path_parts[1:]

        if domain in page_maker:
            page = page_maker[domain](args).encode()
            self.respond(200, "text/html", page)
        else:
            self.respond(404, "text/html",
                         page_error(404, "File not found").encode())

    def json_apply(self, action):
        def apply(data):
            print("RECEIVED", data)
            data = json.dumps(action(json.loads(data))).encode()
            print("SENDING", data)
            self.respond(201, "application/json", data)
        return apply

    def do_POST(self):
        actions = {
            "/$login": self.json_apply(DB.login),
            "/$register": self.json_apply(DB.register),
            "/$search": self.json_apply(DB.search),

            "/$cart_add": self.json_apply(DB.cart_add),
            "/$cart_remove": self.json_apply(DB.cart_remove),
            "/$purchase": self.json_apply(DB.purchase),
        }

        data = self.rfile.read(int(self.headers["Content-Length"]))
        if self.path in actions:
            actions[self.path](data)
        else:
            self.respond(200, "text/html")

    def log_message(self, fmt, *args):
        msg, code, _ = args
        print(f"-- [{code}] {msg}")


def run_server(PORT=8040):
    with http.server.HTTPServer(("localhost", PORT), RequestHandler) as server:
        print(f"Starting server on {PORT}")

        if platform.system() == "Windows":
            path = f"http://localhost:{PORT}"
        else:
            path = f"localhost:{PORT}"

        webbrowser.open(path)
        try:
            server.serve_forever()
        except KeyboardInterrupt:
            print("Quitting...")
html, body{
    margin: 0;
    padding: 0;
}
body {
    display: flex;
    flex-flow: column nowrap;
    align-items: center;
}
#banner {
    background: var(--bg-color);
    box-shadow: 0px 1px 2px 2px var(--border);

    position: sticky;
    top: 0;
    left: 0;

    width: 100%;

    margin-bottom: 10px;
    text-align: center;
    font-size: 150%
}
#banner > .form {
    width: 65%;
    display: inline-block;
}
let cart = {};

const item_updater = (update, checkout) => () => {
    update();
    if(checkout){ goto_checkout(); }
};

const check_quantity = elem => {
    if(elem.value.length > 0){
        let [v, _min, _max] = [parseInt(elem.value), 
            elem.getAttribute("min"), 
            elem.getAttribute("max")
        ];

        if(v < _min){ v = _min; }
        else if(v > _max){ v = _max; } 
        elem.value = v;    
    }
    else {
        elem.value = 1;
    }
}
const add_item_quantity = (elem, id, checkout) => 
    add_item(elem.nextSibling, id, checkout);
    
const add_item = (elem, id, checkout = false) => {
    check_quantity(elem.previousSibling);
    user_upload("/$cart_add", 
        { 
            item_id: id,
            quantity: elem.previousSibling.value
        },
        item_updater(() => { 
            elem.previousSibling.disabled = false;

            elem.value = "Remove"; 
            elem.onclick = () => remove_item(elem, id, checkout)
        })    
    );
}

const remove_item = (elem, id, checkout = false) =>
    user_upload("/$cart_remove", { item_id: id },
        item_updater(() => {
            elem.previousSibling.value = 0;
            elem.previousSibling.disabled = true;
            
            elem.value = "Add to cart";
            elem.onclick = () => add_item(elem, id, checkout);
        })
    );

const checkout_remove = (elem, id) =>
    user_upload("/$cart_remove", 
        { item_id: id }, goto_checkout);

const purchase = () =>
    user_upload("/$purchase", 
        { address: input_get($("#address")) }, goto_store);

const search = elem => {
    if(event.key == "Enter"){ goto(`${elem.value}`); }
};

const goto_store = () => { goto(`/store/${username}/`); };
const goto_checkout = () => { goto(`/checkout/${username}`); };import HTML
import database as DB

def profile_icon(username, onclick="goto('account')"):
    first_name, last_name = DB.get_names(username)
    profile = f"{first_name[0]}{last_name[0]}"
    return HTML.button(profile, onclick=onclick, style="button profile")

def page_store(arg):
    if len(arg) != 2:
        results = [HTML.card(["Error 500: Internal Server Error"])]
        username, query = "", ""
    else:
        username, query = arg
        results = DB.search(username, query)    

        if not results:
            results = [HTML.card(["No items found :("])]

    return HTML.page("Store", [
        HTML.node("script", f'let username = "{username}";'),
        HTML.node("div", [
            HTML.subtitle("MedSys Store"),
            profile_icon(username),
            HTML.text_input("Search",
                            div_id="search",
                            onkeydown="search(this)",
                            value=query),
            HTML.button("Go to checkout", onclick=f"goto_checkout()")
        ], {"id": "banner"}
        )] + results,
        scripts=["base.js", "store.js"],
        css=["style.css", "store.css"]
    )


def page_checkout(arg):
    if len(arg) != 1:
        results = [HTML.card(["Error 500: Internal Server Error"])]
        username, query = "", ""
    else:
        username = arg[0]
        results = DB.checkout(username)
        
        if not results:
            results = [HTML.card(["Empty Cart :P"])]

    return HTML.page("Checkout", [
        HTML.node("script", f'let username = "{username}";'),
        HTML.node("div", [

            HTML.subtitle("Checkout"),
            profile_icon(username),

            HTML.text_input("Billing Address", div_id="address"),
            HTML.button("Purchase", onclick=f"purchase()"),
            HTML.button("Store", onclick=f"goto_store()"),
        ], {"id": "banner"}
        )] + results,
        scripts=["base.js", "store.js", "checkout.js"],
        css=["style.css", "store.css"]
    )

def page_history():
    pass:root {
    --bg-color: white;
    --highlight: #8800FF;
    --border: #AAAAAA;
}

html {
    font-family: 'Noto Sans', sans-serif;
}
* {
    transition: 0.2s;
}

.card {
    display: flex;
    flex-flow: column nowrap;
 
    align-items: center;
    justify-content: space-evenly;

    padding: 50px 30px 50px 30px;
    box-shadow: 0px 1px 2px 2px var(--border);
}

.login {
    width: calc(min(90%, 350px));
}
.result {
    max-height: 40px;
    width: 70%;

    margin: 5px;
}
.cart_result {
    height: 100%;
    width: 90%;
}

::selection {
    background: var(--highlight);
    color: var(--bg-color);
}
header {
    text-align: center;
    margin: 10%;
    font-size: 150%;
    width: 70%;
    display: inline-block;
}
input {
    border: none;
    border-radius: 4px;
    background: var(--bg-color);
}
input :disabled{
    background: black;    
}

.button {
    margin: 5px;
    padding: 10px;
    padding-left: 30px;
    padding-right: 30px;

    background: var(--highlight);
    color: var(--bg-color);
}
.button:hover {
    background: var(--highlight);
    box-shadow: 0px 1px 2px 2px var(--border);
}
.button.text {
    padding: 10px;
    padding-left: 30px;
    padding-right: 30px;

    background: var(--bg-color);
    color: var(--highlight);
}
.button.text:hover {
    box-shadow: none;
    text-decoration: underline;
}
.button.profile {
    border-radius: 50%;
    width: 60px;
    height: 60px;
    padding: 0px;
    text-align: center;
    font-size: 20px;
}

.form {
    width: 80%;
    position: relative;
    padding: 10px;
}
.form input {
    box-sizing: border-box;
    width: 100%;
    padding: 4%;
    border: 2px solid var(--border);
}
.form input:hover {
    border: 2px solid var(--highlight);
}
.form div {
    vertical-align: text-top;

    font-size: 75%;
    position: absolute;
    top: 0px;
    left: 5%;
    padding: 3px;
    background: var(--bg-color);
}
.form span {
    font-size: 75%;
    color: red;
}

.item {
    width: 80%;
    padding: 5px;
    margin: 5px;
    box-shadow: 0px 1px 2px 2px var(--border);
}
.item * {
    margin: 5px;
}
input[type=number] {
    padding: 8px;
    width: 100px;

    border: 2px solid var(--highlight);
    text-align: center;
    content: "HI";
}

.item .name {
    font-size: 120%;
}
.item .desc {
    padding-left: 20px;
}
.item .select {
    text-align: right;
}
.item .select * {
    margin-left: 20px;
}